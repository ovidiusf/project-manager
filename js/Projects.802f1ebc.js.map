{"version":3,"sources":["webpack:///./src/views/Projects.vue?244e","webpack:///src/views/Projects.vue","webpack:///./src/views/Projects.vue?04bb","webpack:///../../../src/components/VExpansionPanel/VExpansionPanel.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelContent.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanels.ts","webpack:///./src/views/Projects.vue"],"names":["_vm","this","_h","$createElement","_c","_self","staticClass","_v","_l","project","key","id","_s","title","due","content","staticRenderFns","data","projects","computed","myProjects","filter","created","mixins","name","props","disabled","readonly","Boolean","header","nextIsActive","classes","groupClasses","isDisabled","expansionPanels","isReadonly","methods","registerContent","unregisterContent","registerHeader","vm","unregisterHeader","onClick","e","toggle","isBooted","render","h","class","attrs","String","baseMixins","isActive","expansionPanel","beforeDestroy","showLazyContent","directives","value","ripple","disableIconRotate","expandIcon","type","default","hideActions","hasMousedown","genIcon","icon","VIcon","setBackgroundColor","tabindex","on","click","mousedown","mouseup","open","provide","accordion","flat","hover","focusable","inset","popout","tile","$attrs","hasOwnProperty","Array","length","updateItem","getValue","item","nextValue","index","toggleMethod","component","VContainer","VExpansionPanel","VExpansionPanelContent","VExpansionPanelHeader","VExpansionPanels"],"mappings":"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","file":"js/Projects.802f1ebc.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"projects\"},[_c('v-container',{staticClass:\"my-2\"},[_c('h1',{staticClass:\"text-h4 grey--text my-5\"},[_vm._v(\"Projects\")]),_c('v-expansion-panels',_vm._l((_vm.myProjects),function(project){return _c('v-expansion-panel',{key:project.id},[_c('v-expansion-panel-header',[_vm._v(\" \"+_vm._s(project.title)+\" \")]),_c('v-expansion-panel-content',{staticClass:\"px-4 grey--text\"},[_c('div',{staticClass:\"font-weight-bold\"},[_vm._v(\"due by \"+_vm._s(project.due))]),_c('div',[_vm._v(\" \"+_vm._s(project.content)+\" \")])])],1)}),1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"projects\">\n    <v-container class=\"my-2\">\n      <h1 class=\"text-h4 grey--text my-5\">Projects</h1>\n      <v-expansion-panels>\n        <v-expansion-panel v-for=\"project in myProjects\" :key=\"project.id\">\n          <v-expansion-panel-header>\n            {{ project.title }}\n          </v-expansion-panel-header>\n          <v-expansion-panel-content class=\"px-4 grey--text\">\n            <div class=\"font-weight-bold\">due by {{ project.due }}</div>\n            <div>\n              {{ project.content }}\n            </div>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n      </v-expansion-panels>\n    </v-container>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport db from '../fb.js';\nimport { populateOrRefreshDB } from '../utils/functions.js';\n\nexport default {\n  data() {\n    return {\n      projects: []\n    };\n  },\n  computed: {\n    ...mapState(['currentUser']),\n    /**\n     * Return only the projects for the current user\n     */\n    myProjects() {\n      return this.projects.filter(\n        project => project.person === this.currentUser\n      );\n    }\n  },\n  created() {\n    populateOrRefreshDB(db, this.projects);\n  }\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Projects.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Projects.vue?vue&type=script&lang=js&\"","// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      /* istanbul ignore else */\n      if (this.content) this.content.isBooted = true\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n","// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  computed: {\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n","// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n","// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { BaseItemGroup, GroupableInstance } from '../VItemGroup/VItemGroup'\nimport VExpansionPanel from './VExpansionPanel'\n\n// Utilities\nimport { breaking } from '../../util/console'\n\n// Types\ninterface VExpansionPanelInstance extends InstanceType<typeof VExpansionPanel> {}\n\n/* @vue/component */\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide (): object {\n    return {\n      expansionPanels: this,\n    }\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile,\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this)\n    }\n\n    /* istanbul ignore next */\n    if (\n      Array.isArray(this.value) &&\n      this.value.length > 0 &&\n      typeof this.value[0] === 'boolean'\n    ) {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this)\n    }\n  },\n\n  methods: {\n    updateItem (item: GroupableInstance & VExpansionPanelInstance, index: number) {\n      const value = this.getValue(item, index)\n      const nextValue = this.getValue(item, index + 1)\n\n      item.isActive = this.toggleMethod(value)\n      item.nextIsActive = this.toggleMethod(nextValue)\n    },\n  },\n})\n","import { render, staticRenderFns } from \"./Projects.vue?vue&type=template&id=07089666&\"\nimport script from \"./Projects.vue?vue&type=script&lang=js&\"\nexport * from \"./Projects.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VExpansionPanel } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelContent } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelHeader } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanels } from 'vuetify/lib/components/VExpansionPanel';\ninstallComponents(component, {VContainer,VExpansionPanel,VExpansionPanelContent,VExpansionPanelHeader,VExpansionPanels})\n"],"sourceRoot":""}